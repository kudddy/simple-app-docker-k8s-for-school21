from typing import List
from pydantic import BaseModel, Field


class UserCityReq(BaseModel):
    message_name: str
    user_id: int


class UserCityResp(BaseModel):
    message_name: str
    status: bool
    user_id: int
    city: List[str]


data = {
    "message_name": "GET_CITY",
    "user_id": 123,
}

# –ë–æ–ª–µ–µ —Å–ª–æ–∂–Ω—ã–π –ø—Ä–∏–º–µ—Ä
data = {
    "update_id": 243475549,
    "message": {
        "message_id": 9450,
        "from": {
            "id": 81432612,
            "is_bot": False,
            "first_name": "Kirill",
            "username": "kkkkk_kkk_kkkkk",
            "language_code": "ru"
        },
        "chat": {
            "id": 81432612,
            "first_name": "Kirill",
            "username": "kkkkk_kkk_kkkkk",
            "type": "private"
        },
        "date": 1589404439,
        "text": "–î–∞"
    }
}


class From(BaseModel):
    id: int
    is_bot: bool
    first_name: str
    username: str or None = None
    language_code: str = None


class Chat(BaseModel):
    id: int
    first_name: str
    username: str or None = None
    type: str


class InlineKeyboard(BaseModel):
    text: str
    callback_data: str or None = None
    url: str or None = None


class ReplyMarkup(BaseModel):
    inline_keyboard: List[List[InlineKeyboard]]


class Message(BaseModel):
    message_id: int
    frm: From = Field(..., alias='from')
    chat: Chat
    date: int
    edit_date: int = None
    text: str
    reply_markup: ReplyMarkup = None


class CallbackQuery(BaseModel):
    id: str
    frm: From = Field(..., alias='from')
    message: Message
    chat_instance: str
    data: str


class Updater(BaseModel):
    update_id: int
    message: Message = None
    callback_query: CallbackQuery = None

    def its_callback(self):
        if self.callback_query:
            return True
        else:
            return False

    def get_message_id(self):

        if self.its_callback():
            message_id = self.callback_query.message.message_id
        else:
            message_id = self.message.message_id

        return message_id

    def get_chat_id(self):
        if self.its_callback():
            chat_id = self.callback_query.message.chat.id
        else:
            chat_id = self.message.chat.id

        return chat_id

    def get_text(self):
        if self.its_callback():
            text = self.callback_query.data
        else:
            text = self.message.text

        return text

    def get_user_id(self):
        if self.its_callback():
            user_id = self.callback_query.frm.id
        else:
            user_id = self.message.frm.id
        return user_id

    def get_username(self):
        if self.its_callback():
            username = self.callback_query.frm.username
        else:
            username = self.message.frm.username
        return username


data_for_callback = {
    "update_id": 632560344,
    "callback_query": {
        "id": "349750407818784147",
        "from": {
            "id": 81432612,
            "is_bot": False,
            "first_name": "Kirill",
            "username": "kkkkk_kkk_kkkkk",
            "language_code": "ru"
        },
        "message": {
            "message_id": 874,
            "from": {
                "id": 1238618041,
                "is_bot": True,
                "first_name": "work_founder",
                "username": "work_founder_bot"
            },
            "chat": {
                "id": 81432612,
                "first_name": "Kirill",
                "username": "kkkkk_kkk_kkkkk",
                "type": "private"
            },
            "date": 1600692962,
            "edit_date": 1600693642,
            "text": "–ø–µ—á–µ–Ω—å",
            "reply_markup": {
                "inline_keyboard": [
                    [
                        {
                            "text": "–ª–æ–ª–∞",
                            "callback_data": "A1"
                        }
                    ]
                ]
            }
        },
        "chat_instance": "4891727470677092353",
        "data": "A1"
    }
}

data = {
    "update_id": 632563156,
    "callback_query": {
        "id": "349750406158492068",
        "from": {
            "id": 81432612,
            "is_bot": False,
            "first_name": "Kirill",
            "username": "kkkkk_kkk_kkkkk",
            "language_code": "ru"
        },
        "message": {
            "message_id": 3571,
            "from": {
                "id": 1238618041,
                "is_bot": True,
                "first_name": "work_founder",
                "username": "work_founder_bot"
            },
            "chat": {
                "id": 81432612,
                "first_name": "Kirill",
                "username": "kkkkk_kkk_kkkkk",
                "type": "private"
            },
            "date": 1634143616,
            "edit_date": 1634143625,
            "text": "üí• –ù–∞–∑–≤–∞–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏: –í–µ–¥—É—â–∏–π –∞—É–¥–∏—Ç–æ—Ä\nüí• –û–ø–∏—Å–∞–Ω–∏–µ: **–û–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞:**\n\n\\- –ü–æ–ª—É—á–µ–Ω–∏–µ, –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö (–∫—Ä–æ–º–µ –¥–∞–Ω–Ω—ã—Ö –±–∞–Ω–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏\n–¥–∞–Ω–Ω—ã–µ –≤–Ω–µ—à–Ω–∏—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤);\n\n\\- –ü—Ä–æ–≤–µ–¥–µ–Ω–∏–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –±–∞–Ω–∫–∞, –ø—Ä–æ–≤–µ—Ä–∫–∞ –≥–∏–ø–æ—Ç–µ–∑, –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è\n—Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤, —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∞—É–¥–∏—Ç–æ—Ä—Å–∫–∏—Ö –æ—Ç—á–µ—Ç–æ–≤;\n\n\\- –ê—É–¥–∏—Ç –ø—Ä–æ—Ü–µ—Å—Å–æ–≤, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–µ–π –≤ –ë–∞–Ω–∫–µ –ö–æ–º–ø–ª–∞–µ–Ω—Å-—Ñ—É–Ω–∫—Ü–∏–∏ (–ü–û–î/–§–¢,\n–∫–æ–Ω—Ñ–ª–∏–∫—Ç –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤ –∏ —Ç.–¥.) –∏ ESG-—Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –ë–∞–Ω–∫–∞, –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏–µ–π –∫–æ–º–∞–Ω–¥—ã\n–ø—Ä–æ–µ–∫—Ç–∞;\n\n\\- –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤ –ø—Ä–æ–≤–µ—Ä–æ–∫.\n\n **–ù–∞—à–∏ –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç –∫–∞–Ω–¥–∏–¥–∞—Ç–∞:**\n\n\\- –í—ã—Å—à–µ–µ –æ...\n\n–ü–æ–∫–∞–∑–∞—Ç—å –µ—â–µ‚ùì",
            "reply_markup": {
                "inline_keyboard": [
                    [
                        {
                            "text": "–ü–æ–ª–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏ –æ—Ç–∫–ª–∏–∫",
                            "url": "https://my.sbertalents.ru/#/job-requisition/2094129"
                        },
                        {
                            "text": "–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å",
                            "callback_data": "–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π"
                        }
                    ],
                    [
                        {
                            "text": "–ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É",
                            "callback_data": "–í –Ω–∞—á–∞–ª–æ"
                        },
                        {
                            "text": "–°–ª–µ–¥—É—é—â–∞—è",
                            "callback_data": "–°–ª–µ–¥—É—é—â–∞—è"
                        }
                    ],
                    [
                        {
                            "text": "–í –∏–∑–±—Ä–∞–Ω–Ω–æ–µ",
                            "callback_data": "–í –∏–∑–±—Ä–∞–Ω–Ω–æ–µ"
                        },
                        {
                            "text": "–ü–æ–∫–∞–∑–∞—Ç—å –∏–∑–±—Ä–∞–Ω–Ω—ã–µ",
                            "callback_data": "–ò–∑–±—Ä–∞–Ω–Ω–æ–µ"
                        }
                    ],
                    [
                        {
                            "text": "–û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤",
                            "callback_data": "–û—á–∏—Å—Ç–∏—Ç—å"
                        }
                    ]
                ]
            }
        },
        "chat_instance": "4891727470677092353",
        "data": "–í –Ω–∞—á–∞–ª–æ"
    }
}

m = Updater(**data)

print(m.get_text())

response_from_tlg = {
    "ok": False,
    "error_code": 400,
    "description": "Bad Request: message text is empty"
}
